"use strict";

var assert = require("assert");
var error = require("./../lib/error");
var core = require("./core");

function is__proto__Property(node) {
	if ( core.is.isProperty(node) && node.kind !== 'get' && node.kind !== 'set' ) {
		var nodeKey = node.key;

		if ( nodeKey ) {
			return nodeKey.name === '__proto__' || nodeKey.value === '__proto__';
		}
	}

	return false;
}

var $GOPDS_P = "function(o){" +
	"var d=Object.create(null);" +
	"for(var p in o)if(o.hasOwnProperty(p)){" +
		"d[p]={\"value\":o[p],\"enumerable\":true,\"configurable\":true,\"writable\":true};" +
	"}" +
	"return d;" +
"}";
var $GOPDS_A = "function(o){" +
	"var d=Object.create(null);" +
	"for(var p in o)if(o.hasOwnProperty(p)){" +
		"d[p]=o[p];" +
	"}" +
	"return d;" +
"}";

var plugin = module.exports = {
	reset: function() {

	}

	, setup: function(alter, ast, options) {
		if( !this.__isInit ) {
			this.reset();
			this.__isInit = true;
		}

		this.alter = alter;
		this.options = options;

		core.registerVar('getPropertiesDef', {name: 'GOPDS_P', template: $GOPDS_P});
		core.registerVar('getAccessorsDef', {name: 'GOPDS_A', template: $GOPDS_A});
	}

	, '::Property[method=true]': function(node) {
		var methodKey = node.key;

		this.alter.insert(methodKey.range[1], ": function");
	}

	, '::Property[shorthand=true]': function(node) {//':: :not(ObjectPattern,ArrayPattern) > Property[shorthand=true]'
		var parent = node.$parent;
		if ( !core.is.isArrayPattern(parent) && !core.is.isObjectPattern(parent) ) {//filter destructuring
			var propertyKey = node.key;
			var propertyValue = node.value;

			var renamingOptions = propertyValue.$renamingOptions;
			if( renamingOptions ) {// turn off changes were made by 'letConst' transpiler
				renamingOptions.inactive = true;
			}

			this.alter.insert(propertyKey.range[1], ": " + propertyValue.name);
		}
	}

	, '::Identifier[name=__proto__], Literal[value=__proto__]': function(node) {// ':: Property:has(Identifier[name=__proto__], Literal[value=__proto__])'
		var parent = node.$parent;
		if( parent && parent.type === 'Property' ) {
			parent = parent.$parent;

			if ( !parent.$uncomputed ) {
				parent.$uncomputed = true;

				assert(parent.type === 'ObjectExpression', parent.type + ' shoud be "ObjectExpression" instead');

				this.replaceComputedProperties(parent);
			}
		}
	}

	, '::Property[computed=true]': function(node) {//':: !:not(ObjectPattern,ArrayPattern) > Property[computed=true]'
		var parent = node.$parent;
		if ( !core.is.isArrayPattern(parent) && !core.is.isObjectPattern(parent)//filter destructuring
			&& !parent.$uncomputed
		) {
			parent.$uncomputed = true;

			assert(parent.type === 'ObjectExpression', parent.type + ' shoud be "ObjectExpression" instead');

			this.replaceComputedProperties(parent);
		}
	}

	, replaceComputedProperties: function(node) {
		var properties = node.properties;
		var beforeString = '';

		var endFragment = '}';
		var computedReplacementStarted = false;

		var objectOpened = '';
		var has__proto__inside = false;

		var _this = this;
		function closeOpenTag(prevProperty) {
			if ( prevProperty ) {
				_this.alter.insertAfter(prevProperty.range[1], endFragment, {extend: true});
			}
			else {
				objectOpened = '},';
			}
		}

		var property = null, prevProperty;
		for ( var i = 0, len = properties.length ; i < len ; i++ ) {
			prevProperty = property;
			property = properties[i];

			var isComputed = property.computed;

			if ( !isComputed && is__proto__Property(property) ) {
				has__proto__inside = true;

				var propKey = property.key;
				if ( !core.is.isLiteral(propKey) ) {
					delete propKey.name;
					propKey.value = '__proto__';
					propKey.raw = '\'__proto__\'';
					propKey.type = 'Literal';
					this.alter.insert(propKey.range[0], '\'', {extend: true});
					this.alter.insertBefore(propKey.range[1], '\'', {extend: true});
				}
			}

			if ( property.kind === 'get' || property.kind === 'set' ) {
				if ( property.$objectLiteral_pass ) {
					continue;
				}

				var expectedNextKind = property.kind === 'set' ? 'get' : 'set';
				var nextAccessor = !isComputed && properties[i + 1];

				if ( nextAccessor ) {
					if ( nextAccessor.computed || nextAccessor.kind !== expectedNextKind ) {
						nextAccessor = void 0;
					}
				}
				if ( nextAccessor ) {
					nextAccessor.$objectLiteral_pass = true;
				}

				closeOpenTag(prevProperty);

				if ( isComputed ) {
					computedReplacementStarted = true;

					beforeString = core.createVars(node, "defineProperty") + '(' + beforeString;
				}
				else {
					beforeString = core.createVars(node, "defineProperties") + '(' + beforeString;

					this.alter.insertBefore(property.range[0], core.createVars(node, "getAccessorsDef") + '({');
				}

				var propKey$0 = property.key;
				this.alter.remove(property.range[0], propKey$0.range[0]);//remove 'set ' or 'get ', or 'set [' or 'get ['
				if ( isComputed ) {
					this.alter.remove(propKey$0.bracketsRange[1] - 1, propKey$0.bracketsRange[1]);//remove ']'
				}
				this.alter.insertBefore(propKey$0.range[1], (isComputed ? ',' : ':') + '{"' + property.kind + '":function');

				if ( nextAccessor ) {
					var nextAccessorKey = nextAccessor.key;
					this.alter.remove(nextAccessor.range[0], nextAccessorKey.range[1]);//remove 'set <name>' or 'get <name>', or 'set [<name>' or 'get [<name>'
					if ( nextAccessor.computed === true ) {
						this.alter.remove(nextAccessorKey.bracketsRange[1] - 1, nextAccessorKey.bracketsRange[1]);//remove ']'
					}
					this.alter.insertBefore(nextAccessorKey.range[1], '"' + nextAccessor.kind + '":function');
					this.alter.insert(nextAccessor.range[1], ',"configurable":true,"enumerable":true}');
				}
				else {
					var propValue = property.value;
					this.alter.insert(propValue.range[1], ',"configurable":true,"enumerable":true}');
				}

				endFragment = isComputed ? ')' : '}))';
			}
			else if ( isComputed || (computedReplacementStarted && core.is.isLiteral(property.key)) ) {
				computedReplacementStarted = true;

				beforeString = core.createVars(node, "defineProperty") + '(' + beforeString;

				var propKey$1 = property.key;
				if ( isComputed ) {
					this.alter.remove(propKey$1.bracketsRange[0], propKey$1.bracketsRange[0] + 1);//remove '['
					this.alter.remove(propKey$1.bracketsRange[1] - 1, propKey$1.bracketsRange[1]);//remove ']'
				}
				else {
					property.$literal = true;
				}
				this.alter.insertBefore(propKey$1.range[1], ',{"value"');

				var propValue$0 = property.value;
				this.alter.insert(propValue$0.range[1], ',"configurable":true,"enumerable":true,"writable":true}');

				closeOpenTag(prevProperty);

				endFragment = ')';
			}
			else if ( computedReplacementStarted ) {
				beforeString = core.createVars(node, "defineProperties") + '(' + beforeString;

				closeOpenTag(prevProperty);

				this.alter.insertBefore(property.range[0], core.createVars(node, "getPropertiesDef") + '({', {extend: true});

				endFragment = '}))';

				computedReplacementStarted = false;
			}
		}

		if ( has__proto__inside ) {
			var forceFix = !!beforeString;

			endFragment = (forceFix ? (endFragment + ', true') : '') + ')';

			beforeString = core.createVars(node, "fix__proto__") + '(' + beforeString;
		}

		if ( beforeString ) {
			if ( endFragment === '}))' ) {
				endFragment = '))';
			}

			if ( property.computed === true || property.$literal === true ) {// lastProperty
				this.alter.replace(node.range[1] - 1, node.range[1], endFragment, {extend: true});//replace '}'
			}
			else {
				this.alter.insertBefore(node.range[1], endFragment, {extend: true});
			}

			this.alter.insertBefore(node.range[0], beforeString, {extend: true});
			if ( objectOpened ) {
				this.alter.insert(node.range[0] + 1, objectOpened);
			}
		}

	}
};

for(var i in plugin) if( plugin.hasOwnProperty(i) && typeof plugin[i] === "function" ) {
	plugin[i] = plugin[i].bind(plugin);
}
