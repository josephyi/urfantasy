"use strict";var $D$0;var S_ITER$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol.iterator||'@@iterator';var S_MARK$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol["__setObjectSetter__"];function GET_ITER$0(v){if(v){if(Array.isArray(v))return 0;var f;if(S_MARK$0)S_MARK$0(v);if(typeof v==='object'&&typeof (f=v[S_ITER$0])==='function'){if(S_MARK$0)S_MARK$0(void 0);return f.call(v);}if(S_MARK$0)S_MARK$0(void 0);if((v+'')==='[object Generator]')return v;}throw new Error(v+' is not iterable')};var $D$1;var $D$2;var $D$3;

var startTime = process.hrtime();
console.log('starting...');

var fs = require("fs");
var path = require("path");
var ansidiff = require("ansidiff");
var es6transpiler = require("./es6-transpiler");

var timeSeconds = void 0, timeNanoseconds = void 0;
timeSeconds = ($D$0 = process.hrtime(startTime))[0], timeNanoseconds = $D$0[1], $D$0;
console.log('started at', (("" + timeSeconds) + ("," + (("" + timeNanoseconds).substring(0, 5))) + ""), 'seconds');
startTime = process.hrtime();

var EOF_STRING = '/* <[tests es6-transpiler test file EOF ]> */';
var SUSPENDED_STRING = '/* <[tests es6-transpiler SUSPENDED test file ]> */';

var commandVariables = {};
process.argv.forEach(function(arg, index, array) {
	var nextArg;
	if( arg.indexOf("--") === 0 ) {
		if( (nextArg = array[index + 1]) && nextArg.indexOf("--") !== 0 ) {
			this[arg.substring(2)] = nextArg.indexOf("--") === 0 ? true : nextArg;
		}
		else {
			this[arg.substring(2)] = true;
		}
	}
}, commandVariables);


function slurp(filename) {
    return fs.existsSync(filename) ? String(fs.readFileSync(filename)) : "";
}

var pathToTests = commandVariables.path;

if( !pathToTests ) {
	pathToTests = fs.existsSync("tests") ? "tests" : path.join("..", "..", "tests");
}

var tests = void 0;
if( commandVariables.file && typeof commandVariables.file === "string" ) {
	tests = [
		commandVariables.file
	]
}
else {
	tests = fs.readdirSync(pathToTests).filter( function(filename)  
		{return !/-out\.js$/.test(filename) && /.js$/.test(filename) && !/-stderr$/.test(filename)}
	 );
}

if( commandVariables.filter && typeof commandVariables.filter === "string" ) {
	commandVariables.filter = commandVariables.filter.toLowerCase();
	tests = tests.filter( function(filename)  
		{return filename.toLowerCase().indexOf(commandVariables.filter) !== -1}
	 );
}

function stringCompare(str1, str2, compareType, removeLines) {
	str1 = ("" + str1)
		.replace(/((\r\n)|\r|\n)/g, "\n")// Windows/Unix, Unicode/ASCII and IDE line break
		.replace(/\t/g, "    ")// IDE settings
		.trim()
	;
	str2 = ("" + str2)
		.replace(/((\r\n)|\r|\n)/g, "\n")// Windows/Unix, Unicode/ASCII and IDE line break
		.replace(/\t/g, "    ")// IDE settings
		.trim()
	;

	var eofKey;

	eofKey = str1.indexOf(EOF_STRING);
	if ( eofKey !== -1 ) {
		str1 = str1.substring(0, eofKey).trim();
	}
	eofKey = str2.indexOf(EOF_STRING);
	if ( eofKey !== -1 ) {
		str2 = str2.substring(0, eofKey).trim();
	}

	// check ansidiff.words first due something wrong with ansidiff.lines method result
	try {
		ansidiff.words(str1, str2, function(obj)  {
			if( obj.added || obj.removed ) {
				throw new Error();//diff's exists
			}
		});

		return true;//no diff
	}
	catch(e) {

	}

	var compareFunction = compareType === "lines" ? ansidiff.lines : ansidiff.chars;

	var equal = true
		, result = compareFunction.call(ansidiff, str1, str2, function(obj) {
			if( obj.added || obj.removed ) {
				equal = false;

				/*obj.added && console.log("added", "'" + obj.value + "'")
				obj.removed && console.log("removed", "'" + obj.value + "'")*/

				if(!obj.value.trim())obj.value = "'" + obj.value + "'"
			}
			else if(removeLines) {
				return null;
			}

			return ansidiff.bright(obj);
		})
	;

    return equal === true || result;
}

function colorRed(text) {
	return /*red*/(("\x1b[31m" + text) + "\x1b[39m");
}

function colorGreen(text) {
	return /*green*/(("\x1b[32m" + text) + "\x1b[39m");
}

var failFiles = [];
function fail(file, type, diff1, diff2) {
	failFiles.push(file);

	console.log((("FAILED test " + file) + (" TYPE " + type) + (" (" + (colorRed("EXPECTED"))) + ("/" + (colorGreen("CURRENT"))) + ")"));
	console.log(diff1, "\n", diff2 || "");
	console.log("\n---------------------------\n");
}

function removeCommentsFromErrorsList(str) {
	return str.replace(/^#[ \t\v\S]+((\n)|(\r\n))/gm, '');
}

var suspendedFiles = [];
console.log('test', tests.length, 'files');
$D$1 = GET_ITER$0(tests);$D$3 = $D$1 === 0;$D$2 = ($D$3 ? tests.length : void 0);for ( var file ;$D$3 ? ($D$1 < $D$2) : !($D$2 = $D$1["next"]())["done"];){file = ($D$3 ? tests[$D$1++] : $D$2["value"]);
	var result = void 0;
	var errors = void 0;

	try {
		var filename = path.join(pathToTests, file);
		var src = String(fs.readFileSync(filename));

		if ( src.contains(SUSPENDED_STRING) ) {
			suspendedFiles.push(filename);
			continue;
		}

		result = es6transpiler.run({src: src, filename: filename, polyfillsSeparator: "\/* <[tests es6-transpiler test file EOF ]> *\/"});
		errors = result.errors.join("\n");
	}
	catch(e) {
		result = {
			src: ""
		};

		errors = [e.message || e.name];
	}
	var srcOut = result.src;

	var noSuffix = file.slice(0, -3);

	var expectedStderr = removeCommentsFromErrorsList(slurp((("" + pathToTests) + ("/" + noSuffix) + "-stderr")));
	var expectedStdout = slurp((("" + pathToTests) + ("/" + noSuffix) + "-out.js"));

	var compare1 = stringCompare(expectedStderr, errors, "lines");
	var compare2 = stringCompare(expectedStdout, srcOut, "lines", true);

	if (compare1 !== true && compare2 !== true) {
		fail(file, "stdout/stderr", compare1, compare2);
	}
	else {
		if (compare1 !== true) {
			fail(file, "stderr", compare1);
			//console.log(stderr);//, "+|+", stdout, "|error|", error);
		}
		if (compare2 !== true) {
			fail(file, "stdout", compare2);
			//console.log(stdout);//, "+|+", stderr, "|error|", error);
		}
	}
};$D$1 = $D$2 = $D$3 = void 0;
console.log(tests.length, 'all done');
if ( failFiles.length ) {
	console.log((("Failed files(" + (failFiles.length)) + "):\n"), failFiles.join('\n'));
}
if ( suspendedFiles.length ) {
	console.log((("Suspended files(" + (suspendedFiles.length)) + "):\n"), suspendedFiles.join('\n'));
}
timeSeconds = ($D$0 = process.hrtime(startTime))[0], timeNanoseconds = $D$0[1], $D$0;
console.log('done at', (("" + timeSeconds) + ("," + (("" + timeNanoseconds).substring(0, 5))) + ""), 'seconds');;$D$0 = void 0;
