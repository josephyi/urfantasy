#!/usr/bin/env node
"use strict";
var $__getDescriptors = function(object) {
  var descriptors = {}, name, names = Object.getOwnPropertyNames(object);
  for (var i = 0; i < names.length; i++) {
    var name = names[i];
    descriptors[name] = Object.getOwnPropertyDescriptor(object, name);
  }
  return descriptors;
}, $__createClassNoExtends = function(object, staticObject) {
  var ctor = object.constructor;
  Object.defineProperty(object, 'constructor', {enumerable: false});
  ctor.prototype = object;
  Object.defineProperties(ctor, $__getDescriptors(staticObject));
  return ctor;
};
var optimist = require("optimist");
var fs = require("fs");
var path = require("path");
var through = require("through");
function extend(target) {
  for (var sources = [], $__1 = 1; $__1 < arguments.length; $__1++) sources[$__1 - 1] = arguments[$__1];
  var toString = {}.toString;
  sources.forEach(function(source) {
    for (var key in source) {
      target[key] = source[key];
    }
  });
  return target;
}
var CLI = function() {
  'use strict';
  var $CLI = ($__createClassNoExtends)({
    constructor: function(Compiler) {
      var stdin = arguments[1] !== (void 0) ? arguments[1]: process.stdin;
      var stdout = arguments[2] !== (void 0) ? arguments[2]: process.stdout;
      var fs_ = arguments[3] !== (void 0) ? arguments[3]: fs;
      this.Compiler = Compiler;
      this.stdin = stdin;
      this.stdout = stdout;
      this.fs = fs_;
    },
    start: function(argv) {
      var options = this.parseArgs(argv);
      if (options.help) {
        this.argParser(argv).showHelp();
      } else if (options.stdio) {
        this.processStdio(options);
      } else {
        for (var i = 2; i < options._.length; i++) {
          var filename = options._[i];
          this.processPath(filename, options);
        }
      }
    },
    parseArgs: function(argv) {
      var args = this.argParser(argv).argv;
      if (args.imports) {
        var imports = {};
        args.imports.split(',').forEach(function(pair) {
          var $__2 = pair.split(':'), requirePath = $__2[0], global = $__2[1];
          imports[requirePath] = global;
        });
        args.imports = imports;
      }
      if (args.global) {
        args.into = args.global;
      }
      return args;
    },
    argParser: function(argv) {
      return optimist(argv).usage('compile-modules usage:\n\n  Using files:\n    compile-modules INPUT --to DIR [--infer-name] [--type TYPE] [--imports PATH:GLOBAL]\n\n  Using stdio:\n    compile-modules --stdio [--type TYPE] [--imports PATH:GLOBAL] [--module-name MOD]').options({
        type: {
          "default": 'amd',
          describe: 'The type of output (one of "amd", "yui", "cjs", or "globals")'
        },
        to: {describe: 'A directory in which to write the resulting files'},
        imports: {describe: 'A list of path:global pairs, comma separated (e.g. jquery:$,ember:Ember)'},
        'infer-name': {
          "default": false,
          type: 'boolean',
          describe: 'Automatically generate names for AMD and YUI modules'
        },
        'module-name': {
          describe: 'The name of the outputted module',
          alias: 'm'
        },
        stdio: {
          "default": false,
          type: 'boolean',
          alias: 's',
          describe: 'Use stdin and stdout to process a file'
        },
        global: {describe: 'When the type is `globals`, the name of the global to export into'},
        help: {
          "default": false,
          type: 'boolean',
          alias: 'h',
          describe: 'Shows this help message'
        }
      }).check((function($__2) {
        var type = $__2.type;
        return type === 'amd' || type === 'yui' || type === 'cjs' || type === 'globals';
      })).check((function(args) {
        return !args['infer-name'] || !args.m;
      })).check((function(args) {
        return (args.stdio && args.type === 'amd') ? !args['infer-name']: true;
      })).check((function(args) {
        return (args.stdio && args.type === 'yui') ? !args['infer-name']: true;
      })).check((function(args) {
        return args.stdio || args.to || args.help;
      })).check((function(args) {
        return args.imports ? args.type === 'globals': args.type !== 'globals';
      }));
    },
    processStdio: function(options) {
      this.processIO(this.stdin, this.stdout, options);
    },
    processIO: function(input, output, options) {
      try {
        throw undefined;
      } catch (end) {
        try {
          throw undefined;
        } catch (write) {
          var data = '', self = this;
          write = function(chunk) {
            data += chunk;
          };
          end = function() {
            this.queue(self._compile(data, options.m, options.type, options));
            this.queue(null);
          };
          input.pipe(through(write, end)).pipe(output);
        }
      }
    },
    processPath: function(filename, options) {
      this.fs.stat(filename, function(err, stat) {
        if (err) {
          throw new Error(err);
        } else if (stat.isDirectory()) {
          this.processDirectory(filename, options);
        } else {
          this.processFile(filename, options);
        }
      }.bind(this));
    },
    processDirectory: function(dirname, options) {
      this.fs.readdir(dirname, function(err, children) {
        if (err) {
          console.error(err.message);
          process.exit(1);
        }
        children.forEach(function(child) {
          this.processPath(path.join(dirname, child), options);
        }.bind(this));
      }.bind(this));
    },
    processFile: function(filename, options) {
      try {
        throw undefined;
      } catch (normalizePath) {
        normalizePath = function(p) {
          return p.replace(/\\/g, '/');
        };
        var ext = path.extname(filename), basenameNoExt = path.basename(filename, ext), dirname = path.dirname(filename), pathNoExt = normalizePath(path.join(dirname, basenameNoExt)), output, outputFilename = normalizePath(path.join(options.to, filename)), moduleName = options['infer-name'] ? pathNoExt: null;
        options = extend({}, options, {m: moduleName});
        this._mkdirp(path.dirname(outputFilename));
        this.processIO(this.fs.createReadStream(filename), this.fs.createWriteStream(outputFilename), options);
      }
    },
    _compile: function(input, moduleName, type, options) {
      var compiler, method;
      type = {
        amd: 'AMD',
        yui: 'YUI',
        cjs: 'CJS',
        globals: 'Globals'
      }[type];
      compiler = new this.Compiler(input, moduleName, options);
      method = "to" + type;
      return compiler[method]();
    },
    _mkdirp: function(directory) {
      var prefix;
      if (this.fs.existsSync(directory)) {
        return;
      }
      prefix = path.dirname(directory);
      if (prefix !== '.' && prefix !== '/') {
        this._mkdirp(prefix);
      }
      return this.fs.mkdirSync(directory);
    }
  }, {});
  return $CLI;
}();
CLI.start = function(Compiler, argv) {
  var stdin = arguments[2] !== (void 0) ? arguments[2]: process.stdin;
  var stdout = arguments[3] !== (void 0) ? arguments[3]: process.stdout;
  var fs_ = arguments[4] !== (void 0) ? arguments[4]: fs;
  return new CLI(Compiler, stdin, stdout, fs_).start(argv);
};
function requireMain() {
  var root = path.join(__dirname, '..'), pkgPath = path.join(root, 'package.json'), pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
  return require(path.join(root, pkg.main));
}
var Compiler = requireMain().Compiler;
CLI.start(Compiler, process.argv);

//@ sourceMappingURL=data:application/json;base64,